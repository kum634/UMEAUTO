<?php
/**
 * 文字コード UTF-8N 改行コードLF
 *
 * @package    basepack
 * @copyright  Copyright (c) 2019
 * @version    1.0.20201006
 * @framework  Lib Framework v3.1.180515
 */
require_once("{$_SERVER["DOCUMENT_ROOT"]}/Lib/Conf.inc");
require_once("Common/Page.class");
require_once("Common/DAC.class");
require_once("Common/Fixed.class");
require_once("Common/Lib.class");
require_once("Common/MailClass.class");
require_once("Common/Tag.class");

use Lib\{Page,DAC,Fixed,Lib,MailClass,Tag};

class Page_ContactConfirm extends Page {
	public $form;
	public $crumbs;

	/**
	 * ページロード時に実行します。
	 */
	public function default() {
		if (!$_SESSION[DOMAIN]["contact"]) $this->location("contact.html");
		$this->crumbs = "<li><a href=\"contact.html\">お問い合わせ</a></li>\n";
		$this->crumbs.= "<li>入力内容の確認</li>\n";
		$this->form = $_SESSION[DOMAIN]["contact"];
	}
	/**
	 * actionがsendのときに実行します。
	 */
	public function send() {
		$dac = new DAC(Lib::connection(), "mysql");
		$form = $_SESSION[DOMAIN]["contact"];
		$time = date("Y-m-d H:i");
		
		try {
			$dac->open();
			$dac->setData("time", $time);
			$dac->setData("name", $form["name"]);
			$dac->setData("kana", $form["kana"]);
			$dac->setData("tel", $form["tel"]);
			$dac->setData("mail", $form["mail"]);
			$dac->setData("postalcode", $form["postalcode"]);
			$dac->setData("city", $form["city"]);
			$dac->setData("addr", $form["addr"]);
			$dac->setData("details", $form["details"]);
			$dac->insert("contact");
			$dac->close();
		
		$mail = new MailClass();
		$mail->subj = "お問い合わせありがとうございました。";
		$mail->body = 
		'お問い合わせ日時	:	'.$time."\n".
		'氏名	:	'.$form["name"]."\n".
		'ふりがな	:	'.$form["kana"]."\n".
		'電話番号	:	'.$form["tel"]."\n".
		'メールアドレス	:	'.$form["mail"]."\n".
		'郵便番号	:	'.$form["postalcode"]."\n".
		'住所（市）	:	'.$form["city"]."\n".
		'住所（字以降）	:	'.$form["addr"]."\n".
		'お問い合わせ内容	:	'.$form["details"]."\n";
		$mail->from = "umetarochan823341@outlook.jp";
		if (!$mail->SendBoth($form["mail"])) throw new Exception($mail->message);
			unset($_SESSION[DOMAIN]["contact"]);
			$this->response("OK", true);
		} catch (Exception $ex) {
			$dac->close();
			$this->response($ex->getMessage(), false);
		}
	}

}
/**
 * フォーム要素とルールの連想配列
 * 指定要素にフィルタールールと必須チェック及びセッション利用の有無を指定する
 */

/**
 * ページインスタンス生成
 * 実行パス、ルール連想配列及びページセッション名を指定する
 */
$page = new Page_ContactConfirm(__DIR__, null, null, false);
/**
 * イベント発生時のコールバック関数、移動先及びセッション保存の有無をセットしload()を実行する
 */
$page->setEvent("default", null, array($page, "default"), "", true);
$page->setEvent("action", "send", array($page, "send"), "", true);

/**
 * クロスページポストの有無を設定する
 */
$page->canCrossPagePostBack = false;
$page->load();