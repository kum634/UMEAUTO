<?php
/**
 * 文字コード UTF-8N 改行コードLF
 * ページングクラス
 *
 * プロパティーアクセスは__get()__set()マジックメソッドによって制御される。
 *
 * @package    Lib
 * @copyright  Copyright (c) 2016-2019 Barman Soft, Inc.
 * @license    https://libframework.org/license.html The Clear BSD License
 * @version    Lib Framework v3.1.191121
 */
namespace Lib;

class Pager {
	/**
	 * @property-read int $limit １ページの表示件数
	 * @property-read int $count 全件数
	 * @property-read int $pagemax 全ページ数
	 * @property-read int $page カレントページナンバー
	 * @property-read int $offset カレントページのオフセットインディックス
	 * @property-read int $prev 前ページナンバー
	 * @property-read int $next 次ページナンバー
	 */
	private $limit;
	private $count;
	private $pagemax;
	private $page;
	private $offset;
	private $prev;
	private $next;
	/**
	 * コンストラクタ
	 */
	public function __construct(string $csv = null) {
		if ($csv) {
			$ss = explode(",", $csv);
			$this->limit = $ss[0];
			$this->count = $ss[1];
			$this->pagemax = $ss[2];
			$this->page = $ss[3];
			$this->offset = $ss[4];
			$this->prev = ($this->page > 1) ? $this->page - 1 : 0;
			$this->next = ($this->page < $this->pagemax) ? $this->page + 1 : 0;
		} else {
			$this->limit = 100;
			$this->count = 0;
			$this->pagemax = 1;
			$this->page = 1;
			$this->offset = 0;
			$this->prev = 0;
			$this->next = 0;
		}
	}
	/**
	 * マジックメソッドゲッター
	 *
	 * @param string $name メンバ変数名
	 */
	public function __get(string $name) {
		return $this->$name;
	}
	/**
	 * マジックメソッドセッター
	 * modified: 170601 countセット時にprevとnextを算出
	 *
	 * @param string $name メンバ変数名
	 * @param mixed $value メンバ変数値
	 */
	public function __set(string $name, $value) {
		switch ($name) {
			case "limit":
				$this->limit = $value;
				break;
			case "page":
				$this->page = $value;
				$this->offset = ($value - 1) * $this->limit;
				break;
			case "count":
				$max = (int) ($value / $this->limit);
				if (($value % $this->limit) > 0) $max++;
				if ($max == 0) $max = 1;

				$this->count = $value;
				$this->pagemax = $max;

				if ($this->page > $max) {
					$this->page = $max;
					$this->offset = ($max - 1) * $this->limit;
					$this->prev = ($this->page > 1) ? $this->page - 1 : 0;
					$this->next = 0;
				} else {
					$this->prev = ($this->page > 1) ? $this->page - 1 : 0;
					$this->next = ($this->page < $this->pagemax) ? $this->page + 1 : 0;
				}
				break;
		}
	}
	/**
	 * UL形式のページャタグを生成する
	 *
	 * @param string $query URLクエリー
	 * @param string $className ulタグに指定するクラス名
	 */
	function getUL(string $query, string $className = null) : string {
		$tag = ($className) ? "<ul class=\"{$className}\">" : "<ul>";
		$query = ($query) ? "&{$query}" : "";
		
		if ($this->page == 1) {
			$tag.= "<li class=\"prev\"><a>&lt;</a></li>";
		} else {
			$page = $this->page - 1;
			$tag.= "<li class=\"prev\"><a href=\"?p={$page}{$query}\">&lt;</a></li>";
		}
		for ($n = 1; $n <= $this->pagemax; $n++) {
			$flg = ($n == $this->page) ? " class=\"current\"" : "";
			$tag.= "<li {$flg}><a href=\"?p={$n}{$query}\">{$n}</a></li>";
		}
		if ($this->page == $this->pagemax) {
			$tag.= "<li class=\"next\"><a>&gt;</a></li>";
		} else {
			$page = $this->page + 1;
			$tag.= "<li class=\"next\"><a href=\"?p={$page}{$query}\">&gt;</a></li>";
		}
		$tag.= "</ul>";
		return $tag;
	}
	/**
	 * DL形式のページャタグを生成する
	 *
	 * @param string $query URLクエリー
	 * @param string $className dlタグに指定するクラス名
	 */
	function getDL(string $query, string $className = null) : string {
		$tag = ($className) ? "<dl class=\"{$className}\">" :  "<dl>";
		$query = ($query) ? "&{$query}" : "";
		
		$tag.= "<dt>Hit: {$this->count}件</dt>";
		
		if ($this->page == 1) {
			$tag.= "<dd class=\"prev\"><a>&lt;</a></dd>";
		} else {
			$page = $this->page - 1;
			$tag.= "<dd class=\"prev\"><a href=\"?p={$page}{$query}\">&lt;</a></dd>";
		}
		for ($n = 1; $n <= $this->pagemax; $n++) {
			$flg = ($n == $this->page) ? " class=\"current\"" : "";
			$tag.= "<dd {$flg}><a href=\"?p={$n}{$query}\">{$n}</a></dd>";
		}
		if ($this->page == $this->pagemax) {
			$tag.= "<dd class=\"next\"><a>&gt;</a></dd>";
		} else {
			$page = $this->page + 1;
			$tag.= "<dd class=\"next\"><a href=\"?p={$page}{$query}\">&gt;</a></dd>";
		}
		$tag.= "</dl>";
		return $tag;
	}
	/**
	 * added: 180918
	 * Select形式のページャタグを生成する
	 */
	function getSelect() : string {
		if ($this->prev) $tag = "<a class=\"prev\" title=\"前ページへ戻る\" data-page=\"{$this->prev}\">&lt;</a>";
		else $tag = "<a class=\"prev off\" title=\"前ページへ戻る\" data-page=\"0\">&lt;</a>";
		
		if ($this->next) $tag.= "<a class=\"next\" title=\"次ページへ進む\" data-page=\"{$this->next}\">&gt;</a>";
		else $tag.= "<a class=\"next off\" title=\"次ページへ進む\" data-page=\"0\">&gt;</a>";
		
		$tag.= "<select>";
		for ($p = 1; $p <= $this->pagemax; $p++) {
			$selected = ($p == $this->page) ? " selected" : "";
			$tag.= "<option value=\"{$p}\"{$selected}>{$p}/{$this->pagemax}</option>";
		}
		$tag.= "</select>";
		return $tag;
	}
}